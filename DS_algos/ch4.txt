// Refactor the following given function from O(N^2) time complexity to O(N)
function greatestNum(arr) {
  for (let idx1 = 0; idx1 < arr.length; idx1++) {
    let isValTheGreatest = true;
    
    for (let idx2 = 0; idx2 < arr.length; idx2++) {
      if (arr[idx2] > arr[idx1]) {
        isValTheGreatest = false;
      }
    }
    
    if (isValTheGreatest) {
      return arr[idx1];
    }
  }
}

// Algorithm:
// i. take greedy algorithm approach and assume initial element in the array
//    is the largest value <=> assign this value to a variable
// ii. iterate through the remaining elements in the array and on each iteration
//   compare if the element being iterated over is larger than the current value
//   that the variable that's keeping track of the largest value is pointing to
//   >> if the element is larger than the value that the variable is pointing to
//     then reassign the value to the element
// iii. return the value that the variable is pointing to
// >> this approach removes the nested loop, so only iterating over each element
//    once in the array, which will give it a time complexity of O(N)

// JavaScript implementation:
function largestNum(arr) {
  let largestValue = arr[0];
  
  arr.forEach(element => {
    if (element > largestValue) {
      largestValue = element;
    }
  });
  
  return largestValue;
}

# Ruby Implementation:
def largestNumber(arr)
  largest = arr[0]
  
  arr.each do |number|
    if number > largest
      largest = number
    end
  end
  
  return largest
end
