# Write a function that recursively calculates a total number of characters
#  across all strings in a given array
def total_num_chars(arr)
  return 0 if arr.empty?
  return arr[0].length + total_num_chars(arr[1..arr.length])
end

total_chars(["ab", "c", "def", "ghij"])   # => 10

# Write a function that uses recursion to create a new array of even numbers
def evens(numbers)
  return [] if numbers.length == 0
  
  if numbers[0] % 2 == 0
    return [numbers[0]].concat(evens(numbers[1..numbers.length]))
  else
    return evens(numbers[1..numbers.length])
  end
end

evens([1, 2, 3, 4, 5, 6, 0])   # => [2, 4, 6, 0] 

# Write a function that calculates the Nth number in the triangle sequence
# triangular numbers: 1, 3, 6, 10, 15, 21
# 2nd number in sequence = N + prior number in sequence = 2 + 1 = 3
# 3rd number in sequence = N + prior number in sequence = 3 + 3 = 6
# 7th number in sequence = N + prior number in sequence = 7 + 21 = 28

def triangular_number(n, tri_nums = {})
  if n == 1
    return n
  elsif !tri_nums[n]
    tri_nums[n] = n + triangular_number(n - 1)
  end

  return tri_nums[n]
end

triangular_number(7)  # => 28

# Write a recursive function that accepts a string and returns the first index
# that contains the character "x". Assume string has at least one "x"
def first_x(str, idx=0)
  if str[idx] =~ /X/i
    return idx
  else 
    first_x(str, idx + 1)
  end
end

first_x("abcdefghijklmnopqrstuvwxyz") # => 23
