// Write a function that reverses an array with O(1) space complexity
function reverse(arr) {
  let idx1 = 0;
  let idx2 = arr.length - 1;
  
  while (idx1 <= Math.floor(arr.length / 2)) {
    [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];

    idx1++;
    idx2--;
  }
  
  return arr;
}

// Define time and space complexity of the following doubling functions
function doubleArray1(array) {
  let newArray = [];

  for(let i = 0; i < array.length; i++) {
    newArray.push(array[i] * 2);
  }
  return newArray;
}

Time complexity: O(N) <=> loop iterates through each element in the given array & doesn't end early
Space complexity: O(N) <=> function creates a new array that stores the doubled value of each of the N elements

function doubleArray2(array) {
  for(let i = 0; i < array.length; i++) {
    array[i] *= 2;
  }

  return array;
}

Time complexity: O(N) <=> loop iterates through each element in the given array & doesn't end early
Space complexity: O(1) <=> function mutates the array & doesn't create new array to store elements 

function doubleArray3(array, index=0) {
  if (index >= array.length) { return; }

  array[index] *= 2;
  doubleArray3(array, index + 1);
  return array;
}

Time complexity: O(N) <=> there are N steps as the function will be called individually for each N element
Space complexity: O(N) <=> the function uses recursion & will push about N function calls to the call stack 
 & therefore will have O(N) space complexity despite it mutating the array in place as each number is doubled
