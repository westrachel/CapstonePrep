# Add methods to the LinkedList class that:
#   1. prints all data in the list
#   2. returns the list's last node
#   3. reverses the list 
class Node
  attr_accessor :data, :next_node
  
  def initialize(data)
    @data = data
  end
end

class LinkedList
  attr_accessor :first_node
  
  def initialize(first_node)
    @first_node = first_node
  end

  def print_all_data
    each_node { |node| puts node.data }
  end
  
  def last
    last_node = first_node

    while last_node.next_node
      last_node = last_node.next_node
    end
  
    return last_node
  end

  def reverse
    nodes = []
    each_node { |node| nodes << node }
    
    idx = -1
    @first_node = nodes[idx]

    while idx >= -1 * nodes.length
      nodes[idx].next_node = nodes[idx - 1]
      idx -= 1
    end
  end
  
  private 
  
  def each_node
    curr_node = first_node
    
    until curr_node.nil?
      yield curr_node
      curr_node = curr_node.next_node
    end
  end
end

n1 = Node.new("once")
n2 = Node.new("upon")
n3 = Node.new("a")
n4 = Node.new("time")
n1.next_node = n2
n2.next_node = n3
n3.next_node = n4

list = LinkedList.new(n1)
list.print_all_data
list.last
list.reverse
list.print_all_data
# outputs: time a upon once

# 4. Add method to DoublyLinkedList class that prints all data in the list in reverse order
class DoubleNode
  attr_accessor :data, :next_node, :previous_node
  
  def initialize(data)
    @data = data
  end
end

class DoublyLinkedList
  attr_accessor :first_node, :last_node
  
  def initialize(first_node=nil, last_node=nil)
    @first_node = first_node
    @last_node = last_node
  end
  
  def reverse_print_all
    curr_node = last_node
    
    until curr_node.nil?
      puts curr_node.data
      curr_node = curr_node.previous_node
    end
  end
end

dn1 = DoubleNode.new("Four")
dn2 = DoubleNode.new("Score")
dn3 = DoubleNode.new("and")
dn4 = DoubleNode.new("Seven")
dn5 = DoubleNode.new("Years")
dn1.next_node = dn2
dn2.next_node = dn3
dn3.next_node = dn4
dn4.next_node = dn5
dn2.previous_node = dn1
dn3.previous_node = dn2
dn4.previous_node = dn3
dn5.previous_node = dn4

double_list = DoublyLinkedList.new(dn1, dn5)
double_list.reverse_print_all