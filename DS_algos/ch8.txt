// 1. Write a function that takes 2 arrays as arguments and returns a new array 
//   that contains all the common elements that appear in both the array arguments.
//  The time complexity should be O(N). There shouldn't be duplicates in the return
//  array given the test cases.
function intersection(arr1, arr2) {
  const commonVals = [];
  const size = arr1.length > arr2.length ? arr1.length : arr2.length;
  
  [...Array(size).keys()].forEach(index => {
    let arr1Val = arr1[index];
    let arr2Val = arr2[index];
    
    if (arr2.includes(arr1Val) && !commonVals.includes(arr1Val)) {
      commonVals.push(arr1Val)
    } else if (arr1.includes(arr2Val) && !commonVals.includes(arr2Val)) {
      commonVals.push(arr2Val)
    }
  });
  
  return commonVals;
}

intersection([1, 2, 3, 4,5], [0, 2, 4, 6, 8]) // [2, 4]

// 2. Write a function that accepts an array of strings & returns the first
// duplicate value. Efficiency should be O(N). There will always be at least
// one duplicate in the array argument.
function firstDuplicate(arr) {
  const counts = {}
  
  for (let i = 0; i < arr.length; i++) {
    let element = arr[i];

    if (counts[element]) {
      return element;
    } else {
      counts[element] = 1;
    }
  }
}

firstDuplicate(["a", "b", "c", "d", "c", "e", "f"])        // "c"
firstDuplicate(["a", "b", "c", "d", "d", "c", "e", "f"])   // "d"

// 3. Write a function that accepts a string that contains all the letters of
// the alphabet except 1 and returns the missing letter. The efficiency should
// be O(N).
function missingLetter(str) {
  const ABCS = "abcdefghijklmnopqrstuvwxyz";
  
  for (let i = 0; i < ABCS.length; i++) {
    let letter = ABCS[i];
    if (!str.includes(letter)) {
      return letter;
    }
  }
}

missingLetter("the quick brown box jumps over a lazy dog") // "f"

// 4. write a function that returns the first non-duplicated character
// in a string. Function should have O(N) efficiency.
function firstNonDuplicate(str) {
  const counts = {};
  
  for (let i = 0; i < str.length; i ++) {
    if (!charAppearsAgain(str, i)) {
      return str[i];
    }
  }
}

function charAppearsAgain(str, idx) {
  let duplicate;
  const char = str[idx];

  if (idx != 0) {
    const beforeCharSlice = str.slice(0, idx);
    duplicate = strHasChar(beforeCharSlice, char);
  }
  if (idx != str.size - 1) {
    const afterCharSlice = str.slice(idx + 1, str.length);
    duplicate = duplicate === true ? true : strHasChar(afterCharSlice, char);
  }
  
  return duplicate;
}

function strHasChar(str, char) {
  return str.includes(char) ? true : false;
}

firstNonDuplicate("minimum"); // "n"
