// Write a function that calculates the largest product of any 3 numbers in
// a given array. Use sorting.
function largestProduct(arr) {
  const sorted = arr.sort(ascending);
  const lgestIdx = sorted.length - 1;
  return sorted[lgestIdx - 2] * sorted[lgestIdx - 1] * sorted[lgestIdx];
}

function ascending(n1, n2) {
  return n1 >= n2 ? 1 : - 1;
}

// Write a function that uses sorting to determine the integer that's
// missing in a given array of integers. Can assume array is only missing
// one integer and that all other integers increment by 1.

function missingNum(arr) {
  const sorted = arr.sort(ascending);
  let missing = sorted[0];
  
  for (let i = 1; i < sorted.length; i += 1) {
    if (sorted[i] - missing > 1) {
      return sorted[i] - 1;
    } else {
      missing = sorted[i];
    }
  }
}

missingNum([5, 2, 4, 1, 0]);                 // 3
missingNum([9, 3, 2, 5, 6, 7, 1, 0, 4]);     // 8

// Write 3 different functions that find the greatest number within an array
// that have time complexities of O(N^2), O(N log N), and O(N).


// O(N^2):
function largestNum(arr) {
  let largest = arr[0];
  
  for (let idx1 = 0; idx1 < arr.length; idx1++) {
    for (let idx2 = 0; idx2 < arr.length; idx2++) {
      if (idx2 !== idx1 && arr[idx2] > arr[idx1]) {
        largest = arr[idx2];
      }
    }
  }
  
  return largest;
}

// O(N log N):
function largestNumber(arr) {
  const sorted = arr.sort(ascending);
  return sorted[sorted.length - 1];
}


// O(N):
function greatestNum(arr) {
  let largest = arr[0];
  arr.forEach(number => {
    largest = number > largest ? number : largest;
  });
  
  return largest;
}



